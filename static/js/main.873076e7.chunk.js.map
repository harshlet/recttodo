{"version":3,"sources":["components/InputTextField.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["InputTextField","props","className","type","onChange","e","setInputState","target","value","console","log","inputState","inputChangeHandle","onClick","localStorage","todoList","setTodoList","Date","now","completed","Todo","todo","tid","tl","todolistnew","filter","t","id","TodoList","todos","map","App","useState","filtertodo","setFilterTodo","useEffect","JSON","parse","getItem","saveLocaltodos","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAuCeA,EAtCQ,SAACC,GA8BpB,OACI,sBAAKC,UAAU,WAAf,UACI,uBAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OA9BX,SAACA,GACvBJ,EAAMK,cAAcD,EAAEE,OAAOC,OAC7BC,QAAQC,IAAIT,EAAMU,YA4BsBC,CAAkBP,IAAIG,MAAOP,EAAMU,aACvE,wBAAQE,QA3BE,WACd,GAAyB,KAArBZ,EAAMU,WAAmB,CACPG,aACdb,EAAMc,WAAa,GACnBd,EAAMe,YAAY,CACd,CAAE,KAAQf,EAAMU,WAAY,GAAMM,KAAKC,MAAOC,WAAW,KAG7DlB,EAAMe,YAAN,sBACOf,EAAMc,UADb,CAEI,CAAE,KAAQd,EAAMU,WAAY,GAAMM,KAAKC,MAAOC,WAAW,MAGjElB,EAAMK,cAAc,MAcpB,mBCZGc,G,MApBF,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAKC,EAAsB,EAAtBA,IAAIC,EAAkB,EAAlBA,GAAGP,EAAe,EAAfA,YAcvB,OACI,+BACI,qBAAKd,UAAU,UAAf,SAA0BmB,IAAW,sBAAKnB,UAAU,MAAf,cAAsB,wBAAQA,UAAU,MAAMW,QAdpE,WAErB,IAAMW,EAAYD,EAAGE,QAAO,SAACC,GACxB,OAAOJ,IAAMI,EAAEC,MAEnBX,EAAYQ,GACff,QAAQC,IAAIc,IAQuD,SAAmD,mBAAGtB,UAAU,kBAAtF,YCFlC0B,EAdE,SAAC3B,GAEd,IAAI4B,EAMJ,OAJAA,EAAQ5B,EAAMc,SAASe,KAAI,SAAAJ,GACvB,OAAO,cAAC,EAAD,CAAiBH,GAAItB,EAAMc,SAAUM,KAAMK,EAAEL,KAAMC,IAAKI,EAAEC,GAAIX,YAAaf,EAAMe,aAAtEU,EAAEC,OAIhB,oBAAIzB,UAAU,OAAd,SACK2B,KCwDFE,MA7Df,WAAgB,IAAD,EAEoBC,mBAAS,IAF7B,mBAENrB,EAFM,KAEKL,EAFL,OAGgB0B,mBAAS,IAHzB,mBAGNjB,EAHM,KAGGC,EAHH,OAIoBgB,mBAAS,WAJ7B,mBAINC,EAJM,KAIKC,EAJL,OAKwBF,mBAAS,IALjC,6BAMbG,qBAAU,WAERnB,EAAYoB,KAAKC,MAAMvB,aAAawB,QAAQ,aAC5ChC,EAAc,MAEd,IAEF6B,qBAAU,WAERI,MACA,CAACxB,IAEH,IAAMwB,EAAe,WACkB,OAAlCzB,aAAawB,QAAQ,YACtBxB,aAAa0B,QAAQ,UAAUJ,KAAKK,UAAU,KAE9C3B,aAAa0B,QAAQ,UAAUJ,KAAKK,UAAU1B,KA0BlD,OACE,sBAAKb,UAAU,MAAf,UACE,iCACE,kDAIF,cAAC,EAAD,CAAU+B,WAAYA,EAAYC,cAAeA,EAAgB5B,cAAeA,EAAeK,WAAYA,EAAYI,SAAUA,EAAUC,YAAaA,IACvJ,cAAC,EAAD,CAAUD,SAAUA,EAAUC,YAAaA,QCnDnC0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.873076e7.chunk.js","sourcesContent":["import React from 'react'\r\nconst InputTextField = (props) => {\r\n\r\n    const inputChangeHandle = (e) => {\r\n        props.setInputState(e.target.value);\r\n        console.log(props.inputState);\r\n    }\r\n    const onAddTodo = () => {\r\n        if (props.inputState !== \"\") {\r\n            const mystorage = localStorage;\r\n            if (props.todoList === []) {\r\n                props.setTodoList([\r\n                    { \"todo\": props.inputState, \"id\": Date.now(), completed: false },\r\n                ]);\r\n            } else {\r\n                props.setTodoList([\r\n                    ...props.todoList,\r\n                    { \"todo\": props.inputState, \"id\": Date.now(), completed: false },\r\n                ]);\r\n            }\r\n            props.setInputState(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    const selectchangeHandle = (e)=>{\r\n        props.setFilterTodo(e.target.value);\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"inpfield\">\r\n            <input type=\"text\" onChange={(e) => inputChangeHandle(e)} value={props.inputState} />\r\n            <button onClick={onAddTodo}>+</button>\r\n            \r\n        </div>\r\n    );\r\n}\r\nexport default InputTextField;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nconst Todo = ({todo,tid,tl,setTodoList})=>{\r\n\r\n    const deleteItemHandle=()=>{\r\n    //     // console.log(todoList);\r\n      const todolistnew=tl.filter((t)=>{\r\n           return tid!==t.id;\r\n       });\r\n       setTodoList(todolistnew);\r\n    console.log(todolistnew);\r\n    // const todonewlist=tl.slice();\r\n    // todonewlist.splice()\r\n    }\r\n    \r\n\r\n    return (\r\n        <li>\r\n            <div className=\"content\">{todo}</div><div className=\"btn\"> <button className=\"del\" onClick={deleteItemHandle}><i className=\"fa fa-trash\"></i></button> </div>\r\n        </li>\r\n    );\r\n}\r\nexport default Todo","import React from 'react'\r\nimport Todo from './Todo'\r\nconst TodoList = (props)=>{\r\n\r\n    let todos=null;\r\n\r\n    todos = props.todoList.map(t=>{\r\n        return <Todo key={t.id} tl={props.todoList} todo={t.todo} tid={t.id} setTodoList={props.setTodoList}/>;\r\n    });\r\n\r\n    return (\r\n            <ul className=\"list\">\r\n                {todos}\r\n            </ul>\r\n    );\r\n}\r\nexport default TodoList;","import './App.css';\n\nimport React,{useEffect, useState} from 'react';\n\nimport InpTextF from './components/InputTextField'\nimport TodoList from './components/TodoList'\n\nfunction App() {\n\n  const [inputState,setInputState]=useState(\"\");\n  const [todoList,setTodoList]=useState([]);\n  const [filtertodo,setFilterTodo]=useState(\"pending\");\n  const [filteredTodo,setfilteredTodo]=useState([]);\n  useEffect(()=>{\n    // const mystorage=window.localStorage;\n    setTodoList(JSON.parse(localStorage.getItem(\"mytodos\")));\n    setInputState(\"\");\n    \n  },[]);\n\n  useEffect(()=>{\n    // const mystorage=window.localStorage;\n    saveLocaltodos();\n  },[todoList]);\n\n  const saveLocaltodos=()=>{\n    if(localStorage.getItem(\"mytodos\")===null){\n      localStorage.setItem(\"mytodos\",JSON.stringify([]));\n    }{\n      localStorage.setItem(\"mytodos\",JSON.stringify(todoList));\n    }\n  }\n\n\n\n// const filtertodosHandle=()=>{\n//   console.log(\"Occureds\");\n//   if(filtertodo==='all'){\n//     setfilteredTodo([...todoList]);\n//   }else if(filtertodo==='completed'){\n//     setfilteredTodo(\n//       todoList.filter((t)=>{\n//         return t.completed;\n//       })\n//     );\n//   }else if(filtertodo==='pending'){\n//     setfilteredTodo(\n//       todoList.filter((t)=>{\n//         return !t.completed;\n//       })\n//     );\n//   }\n// }\n  \n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>\n          Welcome MyTodo \n        </h1>\n      </header>\n      <InpTextF filtertodo={filtertodo} setFilterTodo={setFilterTodo}  setInputState={setInputState} inputState={inputState} todoList={todoList} setTodoList={setTodoList}/>\n       <TodoList todoList={todoList} setTodoList={setTodoList}/> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}